<?php

/**
 * @file
 */
function views_field_calc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_field_calc'),
  );
}

function views_field_calc_theme() {
  $path = drupal_get_path('module', 'views_field_calc');
  return array(
    'views_field_calc_ui_table' => array(
      'arguments' => array('form' => NULL),
      'file' => 'theme.inc',
    ),
  );
}

/**
 *  Column calculation alternatives
 */
function _views_field_calc_calc_options() {
  // TODO: Will add drupal_alter to add modules to capture additional calcs.
  return array('COUNT' => 'Count', 'SUM' => 'sum', 'AVG' => 'Average', 'MIN' => 'Minimum', 'MAX' => 'Maximum', 'MED' => 'Median');
}

/**
 * Calculate total.
 * @param $calc string
 *  Operator for calculation.
 * @param $results array()
 *  Array of results from all rows for a certain field.
 */
function views_field_calc_total($calc, $results) {
  $module = 'views_field_calc';
  // TODO: Will add drupal_alter to add modules to capture additional calcs.
  $function = $module . '_' . $calc;
  $total = $function($results);
  return $total;
}

/**
 * Calculate sum.
 */
function views_field_calc_SUM($arr) {
  foreach ($arr as $value) {
    $total = $total + $value;
  }
  return $total;
}

/**
 * Calculate min.
 */
function views_field_calc_MIN($arr) {
  $total = min($arr);
  return $total;
}

/**
 * Calculate max.
 */
function views_field_calc_MAX($arr) {
  $total = max($arr);
  return $total;
}

/**
 * Calculate count.
 */
function views_field_calc_COUNT($arr) {
  $total = count($arr);
  return $total;
}

/**
 * Calculate average.
 * From http://www.php.net/manual/en/ref.math.php#55168
 */
function views_field_calc_AVG($arr) {
  if (!is_array($arr)) {
    return false;
  }
  return array_sum($arr)/count($arr);
}

/**
 * Calculate median.
 * From http://www.php.net/manual/en/ref.math.php#55173 
 */
function views_field_calc_MED() {
  $args = func_get_args();
  switch(func_num_args()) {
    case 0:
      drupal_set_message(t('median() requires at least one parameter'));
      return false;
      break;
    case 1:
      $args = array_pop($args);
      // fallthrough
    default:
      if(!is_array($args)) {
        drupal_set_message(t('median() requires a list of numbers to operate on or an array of numbers'));
        return false;
      }

      sort($args);
            
      $n = count($args);
      $h = intval($n / 2);

      if($n % 2 == 0) { 
        $median = ($args[$h] + $args[$h-1]) / 2; 
      } 
      else { 
        $median = $args[$h]; 
      }
      break;
  }
  return $median;
}

